==========================================================
***最为重要要点***
--------

Advisor必须要有2个关键点：PointCut和Advice
    PointCut--拦截匹配
        目的：
            （1）为了生成代理，校验当前的类是否有切面
            （2）用代理对象调用的时候，也需要匹配拦截
        涉及：
            类：ClassFilter == 类的拦截器
            方法：MethodMatcher == 方法匹配
    Advice--承载了具体的增强逻辑


==========================================================

1.链接点（JoinPoint） == 一个被代理方法
    程序执行的某个特定位置：
        如类开始初始化前、类初始化后、
        类某个方法调用前后、
        方法抛出异常之后
    一个类货一段程序代码


2.切点（PointCut） == 链接点的集合
    每个程序类有多个连接点，
    如果一个拥有两个方法都是连接点，即连接点是程序类中客观存在的事物
    AOP通过
        确定作用的哪些类
        作用：去匹配，去拦截，
        目的：
        （1）为了生成代理，校验当前的类是否有切面
        （2）用代理对象调用的时候，也需要匹配拦截
        涉及：
        类：ClassFilter == 类的拦截器
        方法：MethodMatcher == 方法匹配


3.增强（advice） == 具体增强的代码逻辑
承载了一些增强的逻辑的
    增强是织入到目标类连接点上的一段程序代码，
    在spring中，增强除用于描述一段程序代码外，还拥有另一个和连接点相关的信息

4.目标对象 Target
    增强逻辑的织入目标类。如果没有AOP，目标业务类需要自己实现所有逻辑，
    而在Aop的帮助下，目标业务类只实现哪些非横切逻辑

5.引介--Introduction
    引介是一种特殊的增强，
    它为类添加一些属性和方法。
    这样，即使一个业务类原本没有实现某个接口，
    通过AOP引介功能，我们可以实现

6.织入--Waving
    织入是将增强添加对目标列具体连接点上的过程
    AOP像一台直播姬，将目标类、增强货引介通过AOP这台织布机无缝低便知道一起
    a、编译期织入，这要求使用特殊的Java编译器
    b、类装载期织入，这需要使用特殊的类装载期
    c、动态代理织入，在运行期为目标类添加增强生成子类的方式
    spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入


7.代理Proxy == 动态生成的，内存中的，对目标对象的增强
    一般持有目标对象，被代理对象

8.切面Aspect--advisor == 一类功能 （日志功能，事物功能，缓存功能）
切面是又由切点和增强（引介）